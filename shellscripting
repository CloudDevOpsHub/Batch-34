hostname
df -h
ls


./   or sh 


#!

777 
+x 
-------------

#!/bin/bash  
echo "This is a shell script"  
ls
echo "I am done running ls command"  

------------

#!/bin/bash 
echo "Hello there"
echo "My name is $(whoami)"
echo "Nice to meet you"


---------
#!/bin/bash  
echo "This is a shell script created by batch-34"
echo "-----------machine detail's----------"
uname -a
echo "-----------machine name----------"
hostname
echo "-----------uptime detail's----------"
uptime
echo "-----------memory detail's----------"
free -m 
echo "-----------running process detail's----------"
ps
 
 
 ----------------
 
#!/bin/bash
# Add two numeric value
((sum=10-5))
#Print the result
echo $sum

------------

#!/bin/bash
echo "Enter Your email"
read email
echo "Welcome $email to Linux Learning session"

--------------


#!/bin/bash
#create new file info
touch info
#check the date and time
date >> info
#list of logged-in users
who  >> info
#show running process
ps >> info

--------

#!/bin/bash 
echo "Current Date & time is $(date)" > info
echo "Current user logged in is $(whoami)" >> info
echo "Current running process is $(ps)" >> info


-------------



#!/bin/bash
# Write a shell script to display the process running on the system for every
# 30 seconds, but only for 3 times.
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# 
# for loop 3 times
for r in 1..100
do
	#see every process on the system
	echo "**************************** x^x^x ****************************"
	ps
	echo "**************************** x^x^x ****************************"
	#sleep for 30 seconds
	sleep 10
        # clean
done




------------


get_name()

 {
echo "John"
}
echo "You are $(get_name)"






----------------

echo "***** FREE AND USED MEMORY *****"

echo  "\e[31;43m ***** FREE AND USED MEMORY *****\e[0m"

31;43m   yello 
\e[0m     

-------------



#!/bin/bash

# Sample script to automate tasks:
# -Update local file database:
echo -e "\e[4;32mUPDATING LOCAL FILE DATABASE\e[0m"
updatedb
if [ $? == 0 ]; then
        echo "The local file database was updated correctly."
else
        echo "The local file database was not updated correctly."
fi
echo ""

# -Find and / or delete files with 777 permissions.
echo -e "\e[4;32mLOOKING FOR FILES WITH 777 PERMISSIONS\e[0m"
# Enable either option (comment out the other line), but not both.
# Option 1: Delete files without prompting for confirmation. Assumes GNU version of find.
#find -type f -perm 0777 -delete
# Option 2: Ask for confirmation before deleting files. More portable across systems.
find -type f -perm 0777 -exec rm -i {} +;
echo ""
# -Alert when file system usage surpasses a defined limit 
echo -e "\e[4;32mCHECKING FILE SYSTEM USAGE\e[0m"
THRESHOLD=30
while read line; do
        # This variable stores the file system path as a string
        FILESYSTEM=$(echo $line | awk '{print $1}')
        # This variable stores the use percentage (XX%)
        PERCENTAGE=$(echo $line | awk '{print $5}')
        # Use percentage without the % sign.
        USAGE=${PERCENTAGE%?}
        if [ $USAGE -gt $THRESHOLD ]; then
                echo "The remaining available space in $FILESYSTEM is critically low. Used: $PERCENTAGE"
        fi
done < <(df -h --total | grep -vi filesystem)


777 permision's ?
   777

   
